---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    snow_change_id: CHG0040003
    org: Default
    check_ssl: no
    uri: "https://{{ sn_instance }}.service-now.com/api/now/table"
    location_bdc_cities: []
    location_soc_cities: []
    bdc: []
    soc: []
    host_statuses:
      - installed
    python_interpreter: /usr/bin/python2.7

  pre_tasks:
   - setup:
      gather_subset:
       - '!all'
  
  tasks:
    - name: Get ServiceNow Change information
      ansible.builtin.uri:
        url: "{{ uri }}/change_request?sysparm_query=number={{ snow_change_id }}"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
      register: change_info

    - name: Collect Change sys_id information
      ansible.builtin.set_fact:
        snow_change_sys_id: "{{ change_info.json.result.0.sys_id }}"

    - name: Get ServiceNow Task CI items
      ansible.builtin.uri:
        url: "{{ uri }}/task_ci?sysparm_query=task={{ snow_change_sys_id }}"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
      register: task_info

    - name: Check if Change has affected CIs
      ansible.builtin.set_fact:
        has_affected_cis: "{{ 'no' if task_info.json.result | length < 1 else 'yes' }}"

    - name: Get ServiceNow CI information
      ansible.builtin.uri:
        url: "{{ uri }}/cmdb_ci/{{ item.ci_item.value }}?sysparm_display_value=true"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
      register: ci_info
      with_items:
        - "{{ task_info.json.result }}"
      when: has_affected_cis | bool

    - name: Collect affected CI
      ansible.builtin.set_fact:
        snow_affected_cis: "{{ snow_affected_cis | default({}) | combine ({item.json.result.asset_tag: item.json.result.name}) }}"
      with_items:
        - "{{ ci_info.results }}"
      when: has_affected_cis | bool

    - name: Get ServiceNow location information
      vars:
        name: "{{ item.json.result.location.display_value | replace(' ', '+')}}"
      ansible.builtin.uri:
        url: "{{ uri }}/cmn_location?sysparm_query=name={{ name }}"
        user: "{{ sn_username }}"
        password: "{{ sn_password }}"
      register: location_info
      with_items:
        - "{{ ci_info.results }}"
      when: has_affected_cis | bool

    - name: Build BDC locations
      ansible.builtin.set_fact:
        location_bdc: "{{ location_bdc | default({}) | combine ({item.json.result.0.name: item.json.result.0.city}) }}"
      with_items: "{{ location_info.results }}"
      when:
        - has_affected_cis | bool
        - item.json.result.0.city in location_bdc_cities

    - name: Build SOC locations
      ansible.builtin.set_fact:
        location_soc: "{{ location_soc | default({}) | combine ({item.json.result.0.name: item.json.result.0.city}) }}"
      with_items: "{{ location_info.results }}"
      when:
        - has_affected_cis | bool
        - item.json.result.0.city in location_soc_cities

    - name: Define location fact
      ansible.builtin.set_fact:
        location: "{{ location_soc if ansible_fqdn in soc else location_bdc }}"
      when: has_affected_cis | bool

    - name: Define fact with CIs per location and status
      ansible.builtin.set_fact:
        cis_per_location: "{{ cis_per_location | default([]) + [item.0.json.result.name] }}"
      loop: "{{ ci_info.results | zip(location_info.results) | list }}"
      when:
        - item.0.json.result.location.display_value in (location.keys() | list)
        - (item.0.json.result.install_status | lower) in (host_statuses | list)
        - item.1.json.result.0.city in (location.values() | list)
        - has_affected_cis | bool

    - name: Create {{ snow_change_id }} inventory
      awx.awx.inventory:
        name: "{{ snow_change_id }}"
        description: "Inventory related to {{ snow_change_id }}"
        organization: "{{ org }}"
        validate_certs: "{{ check_ssl }}"
      when: has_affected_cis | bool

    - name: Add host(s) to {{ snow_change_id }} inventory
      vars:
        name: "{{ item.0.json.result.name }}"
        ansible_host: "{{ item.0.json.result.ip_address }}"
      awx.awx.host:
        inventory: "{{ snow_change_id }}"
        name: "{{ name }}"
        description: "CI from {{ snow_change_id }}"
        validate_certs: "{{ check_ssl }}"
        variables:
          ansible_host: "{{ ansible_host }}"
      loop: "{{ ci_info.results | zip(location_info.results) | list }}"
      when:
        - item.0.json.result.location.display_value in (location.keys() | list)
        - (item.0.json.result.install_status | lower) in (host_statuses | list)
        - item.1.json.result.0.city in (location.values() | list)
        - has_affected_cis | bool

    - name: Add localhost to {{ snow_change_id }} inventory
      awx.awx.host:
        inventory: "{{ snow_change_id }}"
        name: localhost
        description: "Ansible Tower server"
        validate_certs: "{{ check_ssl }}"
        variables:
          ansible_host: 127.0.0.1
          ansible_connection: local
      when: has_affected_cis | bool

    - name: Create {{ snow_change_id }} inventory's servers parent group
      awx.awx.group:
        name: servers
        inventory: "{{ snow_change_id }}"
        description: "Inventory parent group related to {{ snow_change_id }}"
        hosts: "{{ cis_per_location }}"
        validate_certs: "{{ check_ssl }}"
        variables:
          ansible_python_interpreter: "{{ python_interpreter }}"
      when: has_affected_cis | bool

    - name: Create {{ snow_change_id }} inventory's report parent group
      awx.awx.group:
        name: report
        inventory: "{{ snow_change_id }}"
        description: "Inventory parent group related to {{ snow_change_id }}"
        hosts:
          - localhost
        validate_certs: "{{ check_ssl }}"
      when: has_affected_cis | bool

    - name: Create {{ snow_change_id }} inventory's children groups
      awx.awx.group:
        name: "{{ item }}"
        inventory: "{{ snow_change_id }}"
        description: "Inventory children group related to {{ snow_change_id }}"
        children:
          - servers
        validate_certs: "{{ check_ssl }}"
      loop:
        - healthcheck
        - precheck
        - patching
        - postcheck
      when: has_affected_cis | bool
